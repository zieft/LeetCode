"""
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

问总共有多少条不同的路径？

输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右
3. 向下 -> 向右 -> 向下

输入：m = 7, n = 3
输出：28
"""


class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        """
        dp[i][j]: 达到第i, j位置，不同路径的总数是dp[i][j]。

        某一位置i，j，只能由其上方（dp[i-1][j]）或者左方（dp[i][j-1]）到达dp[i-1][j]和dp[i][j-1]的含义是，到达那两个位置的不同路径总数，
        那么，到达i，j位置不同路径的总数就是由上两个位置路径的总数之和。

        O(m * n)
        O(m * n)
        """
        dp = [[1] * n] * m  # 初始化，最上行，和最左列，最上方的行中每一个点都只有一条路径可以到达，所以其值为1。
        if m == 1 or n == 1:
            return 1  # 最上方的行中每一个点都只有一条路径可以到达,同理，最左列也是。

        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]  # 到达i，j位置不同路径的总数就是由上两个位置路径的总数之和

        return dp[m - 1][n - 1]  # index从0开始，m x n的网格从1开始，故-1对齐


if __name__ == '__main__':
    m = 7
    n = 3
    sol = Solution()
    res = sol.uniquePaths(m, n)
    print(res)
